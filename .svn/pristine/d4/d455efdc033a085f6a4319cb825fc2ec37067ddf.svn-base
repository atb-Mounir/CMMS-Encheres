/**
 * 
 */
package org.encheres.dal;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;

import org.encheres.BusinessException;
import org.encheres.bo.Article;
import org.encheres.bo.Categorie;
import org.encheres.bo.Enchere;
import org.encheres.bo.Utilisateur;
import org.encheres.message.CodesResultat;


/**
 * Classe en charge de
 * @author mdelauna2
 * @version EncheresCMM - V1.0
 * @date 22 janv. 2020 - 12:22:37
 */
public class UtilisateurDAOJdbcImpl implements UtilisateurDAO {

	private static final String INSERT_UTILISATEUR="insert into UTILISATEURS VALUES (?,?,?,?,?,?,?,?,?,?,?);";
	private static final String TEST_CONNEXION_UTILISATEUR="SELECT no_utilisateur, pseudo, nom, prenom, email, telephone, rue, code_postal, ville, mot_de_passe, credit, administrateur  FROM UTILISATEURS WHERE pseudo=? AND mot_de_passe=?;";
	private static final String TOUTES_LES_ENCHERES_OUVERTES="SELECT SELECT ut.no_utilisateur, ut.pseudo, ut.nom, ut.prenom,"
			+ "ut.email,ut.telephone,ut.rue,ut.code_postal,ut.ville,ut.mot_de_passe,ut.credit,ut.administrateur,\r\n" + 
			"e.date_enchere, e.montant_enchere, cat.no_categorie, cat.libelle, art.no_article, art.nom_article, "
			+ "art.description, art.date_debut_encheres,\r\n" + 
			"art.date_fin_encheres, art.prix_initial, art.prix_vente, art.no_vendeur, art.no_categorie FROM ARTICLES_VENDUS art\r\n" + 
			"JOIN ENCHERES ON art.no_article=e.no_article JOIN UTILISATEURS ut ON ut.no_utilisateur=art.no_vendeur JOIN CATEGORIES cat\r\n" + 
			"ON art.no_categorie=cat.no_categorie WHERE date_fin_encheres > GETDATE();";
	private static final String MES_ENCHERES_EN_COURS ="select nom_article,prix_initial,date_fin_encheres,no_vendeur FROM ARTICLES_VENDUS art"+
			" JOIN ENCHERES e ON art.no_article=e.no_article JOIN UTILISATEURS ut ON e.no_acheteur=ut.no_utilisateur" +
			"WHERE date_fin_encheres > GETDATE() AND e.no_acheteur=?;";
	private static final String MES_ENCHERES_REMPORTEES = "select MAX(montant_enchere),art.nom_article,art.prix_initial,art.date_fin_encheres,"+
			"art.no_vendeur FROM ENCHERES e JOIN ARTICLES_VENDUS art ON art.no_article=e.no_article"+
			"JOIN UTILISATEURS ut ON e.no_acheteur=ut.no_utilisateur WHERE date_fin_encheres < GETDATE()"+
			"AND e.no_acheteur=? GROUP BY art.nom_article,art.prix_initial,art.date_fin_encheres,art.no_vendeur;";
	private static final String MES_VENTES_EN_COURS ="SELECT a.no_article,a.nom_article,a.description,a.date_debut_encheres,a.date_fin_encheres,"+
			"a.prix_initial,a.prix_vente,a.no_vendeur,a.no_categorie,u.pseudo FROM ARTICLES_VENDUS as a JOIN UTILISATEURS u " +
			"ON u.no_utilisateur=a.no_vendeur WHERE no_vendeur=? AND (date_debut_encheres<=GETDATE() AND date_fin_encheres<=GETDATE());";
	private static final String MES_VENTES_NON_DEBUTEES = "SELECT a.no_article,a.nom_article,a.description,a.date_debut_encheres,a.date_fin_encheres,"+
			"a.prix_initial,a.prix_vente,a.no_vendeur,a.no_categorie,u.pseudo FROM ARTICLES_VENDUS as a"+
			"JOIN UTILISATEURS u  ON u.no_utilisateur=a.no_vendeur  WHERE no_vendeur=? AND date_debut_encheres>GETDATE();";
	private static final String MES_VENTES_TERMINEES = "SELECT a.no_article,a.nom_article,a.description,a.date_debut_encheres,a.date_fin_encheres,"+
			 "a.prix_initial,a.prix_vente,a.no_vendeur,a.no_categorie,u.pseudo FROM ARTICLES_VENDUS as a"+
			 "JOIN UTILISATEURS u  ON u.no_utilisateur=a.no_vendeur WHERE no_vendeur=? AND date_fin_encheres<GETDATE();";
	
	@Override
	public void creerUtilisateur(Utilisateur utilisateur) throws BusinessException {
		System.out.println("Je suis dans creerUtilisateur");
		if(utilisateur==null)
		{
			System.out.println("Je suis dans creerUtilisateur et l'utilisateur est null");
			BusinessException businessException = new BusinessException();
			businessException.ajouterErreur(CodesResultatDAL.INSERT_UTILISATEUR_NULL);
			throw businessException;
		}
		
		try(Connection cnx = ConnectionProvider.getConnection())
		{
			try
			{
				System.out.println("J'ai fais la connexion");
				cnx.setAutoCommit(false);
				PreparedStatement pstmt;
				ResultSet rs;
				pstmt = cnx.prepareStatement(INSERT_UTILISATEUR, PreparedStatement.RETURN_GENERATED_KEYS);
				System.out.println("j'ai fais le pstmt");
				pstmt.setString(1, utilisateur.getPseudo());
				System.out.println(utilisateur.getPseudo());
				pstmt.setString(2, utilisateur.getNom());
				System.out.println(utilisateur.getNom());
				pstmt.setString(3, utilisateur.getPrenom());
				System.out.println(utilisateur.getPrenom());
				pstmt.setString(4, utilisateur.getEmail());
				System.out.println(utilisateur.getEmail());
				pstmt.setString(5, utilisateur.getTelephone());
				System.out.println(utilisateur.getTelephone());
				pstmt.setString(6, utilisateur.getRueUtilisateur());
				System.out.println(utilisateur.getRueUtilisateur());
				pstmt.setString(7, utilisateur.getCpUtilisateur());
				System.out.println(utilisateur.getCpUtilisateur());
				pstmt.setString(8, utilisateur.getVilleUtilisateur());
				System.out.println(utilisateur.getVilleUtilisateur());
				pstmt.setString(9, utilisateur.getMotDePasse());
				System.out.println(utilisateur.getMotDePasse());
				pstmt.setInt(10, utilisateur.getCredit());
				System.out.println(utilisateur.getCredit());
				pstmt.setByte(11, (byte)(utilisateur.isAdministrateur()?1:0));
				System.out.println((byte)(utilisateur.isAdministrateur()?1:0));
				
				pstmt.executeUpdate();
				System.out.println("J'ai passé l'execute");
				rs = pstmt.getGeneratedKeys();
				System.out.println("J'ai passé le rs");
				if(rs.next())
				{
					utilisateur.setNoUtilisateur(rs.getInt(1));
				}
				rs.close();
				pstmt.close();
				cnx.commit();
			}
			catch(Exception e)
			{
				e.printStackTrace();
				cnx.rollback();
				throw e;
			}
		}
		catch(Exception e)
		{
			e.printStackTrace();
			BusinessException businessException = new BusinessException();
			businessException.ajouterErreur(CodesResultatDAL.INSERT_UTILISATEUR_ECHEC);
			throw businessException;
		}
		
	}

	public Utilisateur testConnexion(String pseudo, String motDePasse) throws BusinessException{
		
		Utilisateur utilisateur=null;
		BusinessException businessException = new BusinessException();
		System.out.println(pseudo);
		System.out.println(motDePasse);
		System.out.println("Je suis dans le DAO test de connexion");
		if(pseudo==null  || motDePasse==null)
		{
			System.out.println("Je suis dans creerUtilisateur et le pseudo et ou le mot de passe est null");
			System.out.println(pseudo);
			System.out.println(motDePasse);
			
			businessException.ajouterErreur(CodesResultatDAL.TEST_CONNEXION_NULL);
			throw businessException;
		}
		
		try(Connection cnx = ConnectionProvider.getConnection())
		{
			try
			{
				cnx.setAutoCommit(false);
				PreparedStatement pstmt;
				ResultSet rs;
				pstmt = cnx.prepareStatement(TEST_CONNEXION_UTILISATEUR);
				System.out.println("j'ai fais le pstmt");
				
				pstmt.setString(1, pseudo);
				System.out.println("j'ai fais un set");
				pstmt.setString(2, motDePasse);
				
				System.out.println("j'ai fais les set");
				pstmt.executeQuery();
				System.out.println("J'ai passé l'execute");
				rs = pstmt.executeQuery();
				System.out.println("J'ai passé le rs");
				if(rs.next())
				{
					System.out.println("Succès de connexion utilisateur");
					
					utilisateur=new Utilisateur();
					
					utilisateur.setNoUtilisateur(rs.getInt(1));
					utilisateur.setPseudo(rs.getString(2));
					utilisateur.setNom(rs.getString(3));
					utilisateur.setPrenom(rs.getString(4));
					utilisateur.setEmail(rs.getString(5));
					utilisateur.setTelephone(rs.getString(6));
					utilisateur.setRueUtilisateur(rs.getString(7));
					utilisateur.setCpUtilisateur(rs.getString(8));
					utilisateur.setVilleUtilisateur(rs.getString(9));
					utilisateur.setMotDePasse(rs.getString(10));
					utilisateur.setCredit(rs.getInt(11));
					utilisateur.setAdministrateur(rs.getByte(12)!=0);
				
				}
				else {
					System.out.println("Erreur de connexion utilisateur");
				}
				rs.close();
				pstmt.close();
				cnx.commit();
				
			}
			catch(Exception e)
			{
				e.printStackTrace();
				cnx.rollback();
				throw e;
			}
		}
		catch(Exception e)
		{
			e.printStackTrace();
			businessException.ajouterErreur(CodesResultatDAL.INSERT_UTILISATEUR_ECHEC);
			throw businessException;
		}
		return utilisateur;
	}
	/** 
	 * @{inheritDoc}
	 * @see org.encheres.dal.UtilisateurDAO#byNomArticle()
	 */
	@Override
	public List<Article> byNomArticle() throws BusinessException {
		// TODO Auto-generated method stub
		return null;
	}
	/** 
	 * @{inheritDoc}
	 * @see org.encheres.dal.UtilisateurDAO#byCategorie()
	 */
	@Override
	public List<Article> byCategorie() throws BusinessException {
		// TODO Auto-generated method stub
		return null;
	}
	/** 
	 * @{inheritDoc}
	 * @see org.encheres.dal.UtilisateurDAO#encheresOuvertes()
	 */
	@Override
	public List<Article> toutesLesEncheresOuvertes() throws BusinessException {
		List<Article> toutesLesEncheresOuvertes = new ArrayList<Article>();
		try(Connection cnx = ConnectionProvider.getConnection())
		{
			PreparedStatement pstmt = cnx.prepareStatement(TOUTES_LES_ENCHERES_OUVERTES);
			ResultSet rs = pstmt.executeQuery();
			while(rs.next())
			{
				int noCategorie=rs.getInt("cat.no_categorie");
				String libelleCategorie=rs.getString("cat.libelle");
				Categorie categorie=new Categorie(noCategorie, libelleCategorie);
				
				int noUtilisateur=rs.getInt("ut.no_utilisateur");
				String pseudo=rs.getString("ut.pseudo");
				String nom=rs.getString("ut.nom");
				String prenom=rs.getString("ut.prenom");
				String email=rs.getString("ut.email");
				String telephone=rs.getString("ut.telephone");
				String rue=rs.getString("ut.rue");
				String cp=rs.getString("ut.code_postal");
				String ville=rs.getString("ut.ville");
				String motDePasse=rs.getString("ut.mot_de_passe");
				int credit=rs.getInt("ut.credit");
				boolean administrateur=(rs.getByte("ut.administrateur")!=0);
				Utilisateur utilisateur=new Utilisateur(pseudo, nom, prenom, email, telephone, rue,
						cp, ville, motDePasse, credit, administrateur); 
				
				int montantEnchere=rs.getInt("e.montant_enchere");
				LocalDate dateEnchere=rs.getDate("e.date_enchere").toLocalDate();
				Enchere enchere=new Enchere(dateEnchere,montantEnchere);
				
				int noArticle=rs.getInt("art.no_article");
				String nomArticle=rs.getString("art.nom_article");
				String description=rs.getString("art.description");
				LocalDate dateDebutEncheres=rs.getDate("art.date_debut_encheres").toLocalDate();
				LocalDate dateFinEncheres=rs.getDate("art.date_fin_encheres").toLocalDate();
				int prixInitial=rs.getInt("art.prix_initial");
				int prixVente=rs.getInt("art.prix_vente");
				int noVendeur=rs.getInt("art.no_vendeur");
				int noCategorieArt=rs.getInt("art.no_categorie");
				
				Article article=new Article(noArticle, nomArticle, description, dateDebutEncheres, dateFinEncheres,
						prixInitial, prixVente, categorie, enchere, utilisateur);
				
				toutesLesEncheresOuvertes.add(article);
				
				/*encheresOuvertes.add(new Article(rs.getInt("no_article"),
												rs.getString("nom_article"),
												rs.getString("description"),
												rs.getDate("dateDebutEncheres").toLocalDate(),
												rs.getDate("date_fin_encheres").toLocalDate(),
												rs.getInt("prix_initial"),
												rs.getInt("no_vendeur"),
												rs.getInt("no_categorie")));*/
			}
		}
		catch(Exception e)
		{
			e.printStackTrace();
			BusinessException businessException = new BusinessException();
			businessException.ajouterErreur(CodesResultat.LECTURE_LISTES_ECHEC);
			throw businessException;
		}
		return toutesLesEncheresOuvertes;
	}
	/** 
	 * @{inheritDoc}
	 * @see org.encheres.dal.UtilisateurDAO#mesEncheresEnCours()
	 */
	@Override
	public List<Article> mesEncheresEnCours() throws BusinessException {
		// TODO Auto-generated method stub
		return null;
	}
	/** 
	 * @{inheritDoc}
	 * @see org.encheres.dal.UtilisateurDAO#mesEncheresRemportees()
	 */
	@Override
	public List<Article> mesEncheresRemportees() throws BusinessException {
		// TODO Auto-generated method stub
		return null;
	}
	/** 
	 * @{inheritDoc}
	 * @see org.encheres.dal.UtilisateurDAO#mesVentesEnCours()
	 */
	@Override
	public List<Article> mesVentesEnCours() throws BusinessException {
		// TODO Auto-generated method stub
		return null;
	}
	/** 
	 * @{inheritDoc}
	 * @see org.encheres.dal.UtilisateurDAO#mesVentesNonDebutees()
	 */
	@Override
	public List<Article> mesVentesNonDebutees() throws BusinessException {
		// TODO Auto-generated method stub
		return null;
	}
	/** 
	 * @{inheritDoc}
	 * @see org.encheres.dal.UtilisateurDAO#mesVentesTerminees()
	 */
	@Override
	public List<Article> mesVentesTerminees() throws BusinessException {
		// TODO Auto-generated method stub
		return null;
	}



}
